#!/bin/bash
# 
# Generator script for a dracut initramfs
# Tries to retain some degree of compatibility with the command line
# of the various mkinitrd implementations out there
#

# Copyright 2008, Red Hat, Inc.  Jeremy Katz <katzj@redhat.com>
# GPLv2 header here

[ -f /etc/dracut.conf ] && . /etc/dracut.conf

while (($# > 0)); do
    case $1 in
	-f|--force) force=yes;;
	-h|--help) echo "Usage: $0 [-f] <initramfs> <kernel-version>"
	    exit 1 ;;
	-v|--verbose) set -x;;
	-l|--local) allowlocal="yes" ;;
	--allow-missing) : ;;
	*) break ;;
    esac
    shift
done

[[ $2 ]] && kernel=$2 || kernel=$(uname -r)
[[ $1 ]] && outfile=$(readlink -f $1) || outfile="/boot/initrd-$kernel.img"

if [[ -f $outfile && ! $force ]]; then
    echo "Will not override existing initramfs ($outfile) without --force"
    exit 1
fi

[[ $allowlocal && -f ./init ]] && dsrc="." || dsrc=/usr/libexec/dracut
. $dsrc/dracut-functions
initfile=$dsrc/init
switchroot=$dsrc/switch_root
rulesdir=$dsrc/rules.d
echoer=$dsrc/echoer
hookdirs="pre-udev pre-mount pre-pivot"

initdir=$(mktemp -d -t initramfs.XXXXXX)
trap 'rm -rf "$initdir"' 0 # clean up after ourselves no matter how we die.

# executables that we have to have
exe="/bin/bash /bin/mount /bin/mknod /bin/mkdir /sbin/modprobe /sbin/udevd /sbin/udevadm /sbin/nash /sbin/pidof /bin/sleep /usr/sbin/chroot /bin/echo"
lvmexe="/sbin/lvm"
cryptexe="/sbin/cryptsetup"
# and some things that are nice for debugging
debugexe="/bin/ls /bin/cat /bin/ln /bin/ps /bin/grep /bin/more /bin/dmesg"
# udev things we care about
udevexe="/lib/udev/vol_id /lib/udev/console_init"

# install base files
for binary in $exe $debugexe $udevexe $lvmexe $cryptexe ; do
  inst $binary
done

# FIXME: would be nice if we didn't have to know which rules to grab....
# ultimately, /lib/initramfs/rules.d or somesuch which includes links/copies
# of the rules we want so that we just copy those in would be best
mkdir -p "$initdir/lib/udev/rules.d"
for rule in /lib/udev/rules.d/10-console* /lib/udev/rules.d/40-redhat* /lib/udev/rules.d/50* /lib/udev/rules.d/60-persistent-storage.rules /lib/udev/rules.d/61*edd* /lib/udev/rules.d/64* /lib/udev/rules.d/80* /lib/udev/rules.d/95* $rulesdir/*.rules ; do
  cp "$rule" "$initdir/lib/udev/rules.d"
done

# terminfo bits make things work better if you fall into interactive mode
for f in $(find /lib/terminfo -type f) ; do cp  --parents $f "$initdir" ; done

# FIXME: i18n stuff isn't really distro-independent :/
if [[ -f /etc/sysconfig/keyboard || -f /etc/sysconfig/console/default.kmap ]]; then
    if [ -f /etc/sysconfig/console/default.kmap ]; then
        KEYMAP=/etc/sysconfig/console/default.kmap
    else
        . /etc/sysconfig/keyboard
        [[ $KEYTABLE && -d /lib/kbd/keymaps ]] && KEYMAP="$KEYTABLE.map"
    fi
    if [[ $KEYMAP ]]; then
        [ -f /etc/sysconfig/keyboard ] && inst /etc/sysconfig/keyboard
        inst /bin/loadkeys
        findkeymap $KEYMAP

        for FN in $KEYMAPS; do
            inst $FN
            case $FN in
                *.gz) gzip -d "$initdir$FN" ;;
                *.bz2) bzip2 -d "$initdir$FN" ;;
            esac
        done
    fi
fi

if [ -f /etc/sysconfig/i18n ]; then
    . /etc/sysconfig/i18n
    inst /etc/sysconfig/i18n
    [[ $SYSFONT ]] || SYSFONT=latarcyrheb-sun16
    inst /bin/setfont

    for FN in /lib/kbd/consolefonts/$SYSFONT.* ; do
        inst "$FN"
        case $FN in
            *.gz) gzip -d "$initdir$FN" ;;
            *.bz2) bzip2 -d "$initdir$FN" ;;
        esac
    done
    [[ $SYSFONTACM ]] && inst /lib/kbd/consoletrans/$SYSFONTACM
    [[ $UNIMAP ]] && inst /lib/kbd/unimaps/$UNIMAP
fi

# install our files
cp $initfile "$initdir/init"
cp $switchroot "$initdir/sbin/switch_root"
cp $echoer "$initdir/echoer"
for hookdir in $hookdirs; do
    for hook in "$dsrc/$hookdir"/*; do
	[[ -f $hook ]] && inst "$hook" "/$hookdir/${hook##*/}"
    done
done

# and create some directory structure
for d in etc proc sys sysroot dev/pts; do mkdir -p "$initdir/$d"; done
# FIXME: hard-coded module list of doom.
[[ $modules ]] || modules="=ata =block =drm dm-crypt aes sha256 cbc"

instmods $modules

# Grab modules for all filesystem types we currently know about
while read d mp t rest; do
    instmods "$t"
done </proc/mounts

/sbin/depmod -a -b "$initdir" $kernel || {
    error "\"/sbin/depmod -a $kernel\" failed."
    exit 1
}

( cd "$initdir"; find . |cpio -H newc -o |gzip -9 > "$outfile"; )
