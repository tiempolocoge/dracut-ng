#!/bin/sh

. /lib/dracut-lib

if getarg rdnetdebug ; then
    exec >/tmp/netroot.$1.$$.out
    exec 2>>/tmp/netroot.$1.$$.out
    set -x
fi

# Huh? Empty $1?
[ -z "$1" ] && exit 1

# Huh? No interface config?
[ ! -e /tmp/net.$1.up ] && exit 1

# Only try to configure from one network interface at a time
#
if [ -z "$NETROOT_LOCKED" ] ; then
    NETROOT_LOCKED=true
    export NETROOT_LOCKED
    exec flock -xo /tmp/netroot.lock -c "$0 $*"
    exit 1
fi

# There's no sense in doing something if no (net)root info is available
# or root is already there
[ -e /tmp/root.info ] || exit 1
. /tmp/root.info
[ -d $NEWROOT/proc ] && exit 0
[ -z "$netroot" ] && exit 1

netif=$1

# Figure out the handler for root=dhcp by recalling all netroot cmdline 
# handlers
if [ "$netroot" = "dhcp" ] ; then
    # Unset root so we can check later
    unset root

    # Load dhcp options
    [ -e /tmp/dhclient.$netif.dhcpopts ] && . /tmp/dhclient.$netif.dhcpopts

    # Set netroot to new_root_path, so cmdline parsers don't call
    netroot=$new_root_path

    for f in ./cmdline/90*.sh; do
	[ -f "$f" ] && . "$f";
    done
else 
    rootok="1"
fi

# Check: do we really know how to handle (net)root?
[ -z "$root" ] && die "No or empty root= argument"
[ -z "$rootok" ] && die "Don't know how to handle 'root=$root'"

handler=${netroot%%:*}
handler=${handler%%4}
handler="/sbin/${handler}root"
if [ -z "$netroot" ] || [ ! -e "$handler" ] ; then
    die "No handler for netroot type '$netroot'"
fi

# We're here, so we can assume that upping interfaces is now ok
. /tmp/net.$netif.up
[ -e /tmp/net.$netif.gw ]          && . /tmp/net.$netif.gw
[ -e /tmp/net.$netif.hostname ]    && . /tmp/net.$netif.hostname
[ -e /tmp/net.$netif.resolv.conf ] && cp -f /tmp/net.$netif.resolv.conf /etc/resolv.conf

# Source netroot hooks before we start the handler
source_all netroot

# Run the handler; don't store the root, it may change from device to device
# XXX other variables to export?
if $handler $netif $netroot $NEWROOT; then
    # Network rootfs mount successful
    [ -f /tmp/dhclient.$netif.lease ] &&    cp /tmp/dhclient.$netif.lease    /tmp/net.$netif.lease
    [ -f /tmp/dhclient.$netif.dhcpopts ] && cp /tmp/dhclient.$netif.dhcpopts /tmp/net.$netif.dhcpopts

    # Save used netif for later use
    echo $netif > /tmp/net.bootdev
else 
    warn "Mounting root via '$netif' failed"
    # If we're trying with multiple interfaces, put that one down.
    # ip down/flush ensures that routeing info goes away as well
    ip link set $netif down
    ip addr flush dev $netif
    echo "#empty" > /etc/resolv.conf
fi
exit 0
